import java.awt.*;
import javax.swing.*;
import java.util.ArrayList;

public class HelicopterPolice extends Police {
    private ArrayList<Image> frames = new ArrayList<>(); // ‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    private int frame = 0, frameDelay = 0;               // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ü‡∏£‡∏°
    private int prevX;                                   // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏ô‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ü‡∏£‡∏°

    /** Constructor: ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô */
    public HelicopterPolice(int x, int speed) {
        super(x, speed);

        // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô 4 ‡πÄ‡∏ü‡∏£‡∏°
        for (int i = 1; i <= 4; i++) {
            String path = "assets/helicopter/helicopter_run_" + String.format("%03d", i) + ".png";

            frames.add(new ImageIcon(path).getImage());
        }

        this.width = 350;
        this.height = 100;
        this.y = GamePanel.GROUND_Y - 135; // ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏¢‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô
        this.prevX = x;                    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    }

    /** ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô */
    @Override
    public void update() {
        prevX = x;       // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏ä‡∏ô
        x -= speed;      // ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡∏ß‡∏≤‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢

        // üîÅ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏£‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏∏‡∏Å 6 tick)
        frameDelay++;
        if (frameDelay >= 6) {
            frame = (frame + 1) % frames.size();
            frameDelay = 0;
        }
    }

    /** ‡∏ß‡∏≤‡∏î‡πÄ‡∏Æ‡∏•‡∏¥‡∏Ñ‡∏≠‡∏õ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏´‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô) */
    @Override
    public void draw(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        Image currentFrame = frames.get(frame);

        // ‚úÖ ‡∏û‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô (flip) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Æ‡∏•‡∏¥‡∏Ñ‡∏≠‡∏õ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡πÇ‡∏à‡∏£
        g2d.drawImage(currentFrame, x + width, y - height, -width, height, null);
    }

    /** ‡∏Å‡∏≥‡∏´‡∏ô‡∏î hitbox ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏ä‡∏ô */
    @Override
    public Rectangle getBounds() {
        // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î hitbox ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏•‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡πÅ‡∏Ñ‡∏ö‡∏Å‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á)
        int hitWidth = (int) (width * 0.5);
        int hitHeight = (int) (height * 0.6);
        int hitX = x + (width - hitWidth) / 2;
        int hitY = y - height + (height - hitHeight) / 2;

        return new Rectangle(hitX, hitY, hitWidth, hitHeight);
    }

    /** ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Æ. ‡∏ö‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô player ‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô checkCollisionSmooth) */
    public boolean passedThrough(Rectangle playerRect) {
        Rectangle now = getBounds();
        Rectangle before = new Rectangle(
            prevX + (width - (int)(width * 0.8)) / 2,
            now.y,
            (int)(width * 0.8),
            (int)(height * 0.6)
        );

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏ß‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ü‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ã‡πâ‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô player ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ä‡∏ô
        return (before.x > playerRect.x + playerRect.width && now.x < playerRect.x);
    }

    /** Getter ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (prevX) */
    public int getPrevX() {
        return prevX;
    }

    /** Getter ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (width) */
    public int getWidth() {
        return width;
    }
}
